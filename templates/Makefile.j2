# This file is built automatically using cg.py file and Makefile.j2
# Any change you make on this file will be lost in the next run.

# Remove target files after command failure.
.DELETE_ON_ERROR:

models: \
	{% for wiki in wiki_names %}
		{{ wiki }}_models{% if not loop.last %} \{% endif %}

	{% endfor %}

tuning_reports: \
	{% for wiki in wiki_names %}
		{{ wiki }}_tuning_reports{% if not loop.last %} \{% endif %}

	{% endfor %}

touch:
	touch datasets/*
	touch models/*

include  Makefile.manual


{% for wiki in wikis %}
############################# {{ wiki.label }} ################################
{%if wiki.external_samples%}
{% for sample_name, sample in wiki.external_samples|dictsort %}
{% if "quarry_url" in sample %}
{% if "quarry_page" in sample %}
# From {{ sample.quarry_page }}
{% endif %}
datasets/{{ wiki.name }}.{{ sample_name }}.json:
	wget -qO- {{ sample.quarry_url }} > $@
{% endif %}
{% if "labeling_campaign" in sample %}
datasets/{{ wiki.name }}.{{ sample_name }}.json:
	./utility fetch_labels \
		{{ sample.labeling_campaign }} > $@
{% endif %}
{% endfor %}
{% endif %}

{% if wiki.autolabeled_samples %}
{% for autolabeled_name, input_name in wiki.autolabeled_samples.samples|dictsort %}
datasets/{{ wiki.name }}.{{ autolabeled_name }}.json: \
		datasets/{{ wiki.name }}.{{ input_name }}.json
	cat $< | \
	./utility autolabel --host=https://{{ wiki.host }} \
		--trusted-groups={{ wiki.autolabeled_samples.trusted_groups|join(",") }} \
		--trusted-edits=1000 \
		--revert-radius=3 \
		--revert-window=48 \
		--verbose > $@
{% endfor %}
{% endif %}

{% if wiki.balanced_5k_samples %}
{% for balanced_name, input_name in wiki.balanced_5k_samples.samples|dictsort %}
datasets/{{ wiki.name }}.{{ balanced_name }}.json: \
		datasets/{{ wiki.name }}.{{ input_name }}.json
	( \
	 cat datasets/{{ wiki.name }}.{{ input_name }}.json | grep '"needs_review": (true|"True") | \
	 shuf -n 2500; \
	 cat datasets/{{ wiki.name }}.{{ input_name }}.json | grep '"needs_review": (false|"False") | \
	 shuf -n 2500 \
	) | shuf > $@
{% endfor %}
{% endif %}

{% if wiki.merged_samples %}
{% for merged_name, input_sample_names in wiki.merged_samples|dictsort %}
datasets/{{ wiki.name }}.{{ merged_name }}.json: \
{% for input_sample_name in input_sample_names %}
		datasets/{{ wiki.name }}.{{ input_sample_name }}.json{% if not loop.last %} \{% endif %}
{% endfor %}
	./utility merge_labels $^ > $@
{% endfor %}
{% endif %}

{% if wiki.extracted_samples %}
{% for extracted_name, extraction in wiki.extracted_samples|dictsort %}
datasets/{{ wiki.name }}.{{ extracted_name }}.json: \
		datasets/{{ wiki.name }}.{{ extraction.sample }}.json
	revscoring extract \
{% for label_name in extraction.features_for %}
		editquality.feature_lists.{{ wiki.name }}.{{ label_name }} \
{% endfor %}
		--host https://{{ wiki.host }} \
		--extractors $(max_extractors) \
		--verbose > $@
{% endfor %}
{% endif %}

{% if wiki.models %}
{% for model_name, model in wiki.models|dict_sort %}
{% if model.tune %}
tuning_reports/{{ wiki.name }}.{{ model_name }}.md: \
		datasets/{{ wiki.name }}.{{ model.sample }}.json
	cat $< | \
	revscoring tune \
		config/classifiers.params.yaml \
		editquality.feature_lists.{{ wiki.name }}.{{ model_name }} \
		{{ model.label }} \
		roc_auc.labels.true \
		--label-weight "{{ model.label_weight }}" \
		--pop-rate "true={{ model.pop_rate_true }}" \
		--pop-rate "false={{ 1 - model.pop_rate_true }}" \
		--center --scale \
		--cv-timeout 60 \
		--debug > $@
{% endif %}
{% if model.cv_train %}
models/{{ wiki.name }}.{{ model_name }}.{{ norm_alg_filename(model.cv_train.algorithm) }}.model: \
		datasets/{{ wiki.name }}.
{% endif %}.{{ wiki.name }}.{{ model_name }} \
		{{ model.label }} \
		--version=$({{ model_name }}_major_minor).{{ model.build_number }} \
		{% for key, value in model.cv_train.parameters|dictsort %}
		-p '{{ key }}={{ value|tojson|safe }}' \
		{% endfor %}
		--label-weight $({{ model_name }}_label_weight) \
		--pop-rate "true={{ model.pop_rate_true }}" \
		--pop-rate "false={{ 1 - model.pop_rate_true }}" \
		--center --scale > $@;
	revscoring model_info $@ > model_info/{{ wiki.name }}.{{ model_name }}.md
{% endfor %}


{{ wiki.name }}_models:{% if wiki.models %} \
{% for model_name, model in wiki.models.items() if model.cv_train %}
	models/{{ wiki.name }}.{{ model_name }}.{{ norm_alg_filename(model.cv_train.algorithm) }}.model{% if not loop.last %} \{% endif %}
{% endfor %}
{% endif %}

{{ wiki.name }}_tuning_reports:{% if wiki.models %} \
{% for model_name, model in wiki.models.items() if model.tune %}
	tuning_reports/{{ wiki.name }}.{{ model_name }}.md{% if not loop.last %} \{% endif %}
{% endfor %}
{% endif %}

{% endfor %}
